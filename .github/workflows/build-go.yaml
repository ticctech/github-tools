# Builds a docker image, publishes it to GitHub's docker repo (ghcr.io).
# The workflow will only run if commit message contains [tag:patch|minor|major]

# See: https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows

name: Build Go container

on:
  workflow_call:
    outputs:
      tag:
        description: The git tag for the build
        value: ${{ jobs.image.outputs.tag }}

jobs:
  image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      tag: ${{ steps.curr-tag.outputs.result }}

    # run unless explicitly skipped (commit message contains [skip])
    if: |
      !contains(github.event.head_commit.message, '[skip]')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # most recent release
      - name: Latest release
        id: prev-tag
        uses: actions/github-script@v6
        with:
          script: |
            const resp = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            return resp.data.tag_name
          result-encoding: string

      - name: Check for breaking change approval
        id: breaking-check
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Event name:', context.eventName)
            console.log('Event payload keys:', Object.keys(context.payload))
            
            // Check various possible sources for [breaking] tag
            const sources = [
              context.payload.head_commit?.message,
              context.payload.pull_request?.title,
              context.payload.pull_request?.body,
              context.payload.commits?.[0]?.message,
              // For workflow_call, check the triggering workflow
              context.payload.workflow_run?.head_commit?.message
            ]
            
            // Log all sources for debugging
            sources.forEach((source, index) => {
              if (source) console.log(`Source ${index}:`, source)
            })
            
            // Check if any source contains [breaking]
            const hasBreaking = sources.some(source => 
              source && source.toLowerCase().includes('[breaking]')
            )
            
            if (hasBreaking) {
              console.log('Found [breaking] tag - will skip breaking change check')
              return 'true'
            }
            
            // If PR event, check all commits in the PR
            if (context.payload.pull_request) {
              console.log('Checking PR commits for [breaking] tag')
              try {
                const commits = await github.rest.pulls.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number
                })
                
                const hasBreakingInCommits = commits.data.some(commit => {
                  const message = commit.commit.message?.toLowerCase() || ''
                  console.log('Checking commit message:', message)
                  return message.includes('[breaking]')
                })
                
                if (hasBreakingInCommits) {
                  console.log('Found [breaking] in PR commits')
                  return 'true'
                }
              } catch (error) {
                console.log('Error checking PR commits:', error.message)
              }
            }
            
            console.log('No [breaking] tag found')
            return 'false'
          result-encoding: string

      # check for breaking changes in protos
      - name: Fail when breaking proto change
        if: |
          !(contains(steps.prev-tag.outputs.result, 'alpha') ||
          steps.breaking-check.outputs.result == 'true')
        uses: bufbuild/buf-breaking-action@v1
        with:
          against: https://github.com/${{ github.repository }}.git#tag=${{ steps.prev-tag.outputs.result }}
          buf_token: ${{ secrets.BUF_PAT }}

      #  lint proto files
      - name: Lint protos
        uses: bufbuild/buf-lint-action@v1
        with:
          input: proto
          buf_token: ${{ secrets.BUF_PAT }}

      # buf push --tag <TAG_NAME>
      - name: Push to Buf Schema Registry
        uses: bufbuild/buf-push-action@v1
        with:
          input: proto
          buf_token: ${{ secrets.BUF_PAT }}

      # increment repo version tag
      - run: npm install semver json-diff
      - name: Increment version
        id: curr-tag
        uses: actions/github-script@v6
        with:
          script: |
            const jsonDiff = require('json-diff')
            const semver = require('semver')

            const getProtoJson = async (version) => {
              await exec.exec('buf', ['build', version, '--exclude-imports', '--exclude-source-info', '-o', '-#format=json'], {
                listeners: {stdout: (data) => { 
                  return data.toJSON()
                }}
              })
            }

            const latestTag = '${{ steps.prev-tag.outputs.result }}'
            console.log('Latest tag:', latestTag)

            const increment = async () => {
              // Get commits since last tag to check for breaking changes
              const commits = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                since: latestTag,
              })
              
              console.log('Commits since last tag:', commits.data.length)
              
              const messages = commits.data.map(c => c.commit.message.toLowerCase())
              console.log('Commit messages:', messages)
              
              // Check for breaking changes in commit messages - this takes priority
              const hasBreaking = messages.some(msg => msg.includes('breaking') || msg.includes('major'))
              console.log('Has breaking changes:', hasBreaking)
              
              if (hasBreaking) {
                console.log('Returning major increment')
                return 'major'
              }
              
              // If it's a prerelease and no breaking changes, increment prerelease
              const isPrerelease = semver.prerelease(latestTag)
              console.log('Is prerelease:', isPrerelease)
              
              if (isPrerelease){
                console.log('Returning prerelease increment')
                return 'prerelease'
              }
              
              // Check for proto changes
              console.log('Checking for proto changes...')
              const latestRelease = `https://${{ secrets.ACTIONS_TOKEN }}@github.com/${{ github.repository }}.git#tag=${latestTag}`
              
              try {
                const currProto = await getProtoJson('.')
                const prevProto = await getProtoJson(latestRelease)
                const protoDiff = jsonDiff.diff(currProto, prevProto, { sort: true })
                console.log('Proto changes detected:', !!protoDiff)

                if (protoDiff) {
                  console.log('Returning minor increment for proto changes')
                  return 'minor'
                }
              } catch (error) {
                console.log('Error checking proto changes:', error.message)
              }
              
              console.log('Returning patch increment (default)')
              return 'patch'
            }
            
            const incrementType = await increment()
            console.log('Final increment type:', incrementType)
            const newVersion = `v${semver.inc(latestTag, incrementType)}`
            console.log('New version:', newVersion)
            return newVersion
          result-encoding: string

      # unit tests
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.18.0"

      - name: Run unit tests
        env:
          # use env vars to write unmasked secrets to .netrc file
          BUF_USER: ${{ secrets.BUF_USER }}
          BUF_PAT: ${{ secrets.BUF_PAT }}
          GH_USER: ${{ secrets.ACTIONS_USER }}
          GH_PAT: ${{ secrets.ACTIONS_TOKEN }}
        run: |
          echo "machine github.com login $GH_USER password $GH_PAT" >> ~/.netrc
          echo "machine buf.build login $BUF_USER password $BUF_PAT" >> ~/.netrc
          go env -w GOPRIVATE="github.com/${{ github.repository_owner }}/*"
          go mod download
          go test -v ./...

      # set up docker buildx
      - uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # log in to GitHub packages (ghcr.io)
      - name: Log in to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # build docker image and push to ghcr.io
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          # context: .
          build-args: |
            BUF_USER=${{ secrets.BUF_USER }}
            BUF_PAT=${{ secrets.BUF_PAT }}
            GH_USER=${{ secrets.ACTIONS_USER }}
            GH_PAT=${{ secrets.ACTIONS_TOKEN }}
            GH_ORG=${{ github.repository_owner }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.curr-tag.outputs.result }}
            ghcr.io/${{ github.repository }}:latest

      # create release (incl. underlying tag)
      - name: Create release
        uses: actions/github-script@v6
        with:
          script: |
            const semver = require('semver')
            const tag = '${{ steps.curr-tag.outputs.result }}'

            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              prerelease: false
              // prerelease: semver.prerelease(tag)?.length > 0
            })
