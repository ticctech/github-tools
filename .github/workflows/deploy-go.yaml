# Deploys the specified docker image as a Container App.

# https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/reusing-workflows

name: Deploy Container App

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: |
          The environment to deploy to. Must be one of 'staging', 'development', or 'test'.
      tag:
        type: string
        description: |
          GitHub tag to use to select image to deploy. Expected in format 'v1.2.3', 
          e.g. 'v0.5.0-beta.1'. If nothing is specified, the latest release tag will be used.
      api-backends:
        type: string
        description: |
          A comma separated list of custom API backend names.
          Not required if using the default backend name (repo name)


jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment == 'test' && 'development' || inputs.environment }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Set env
        id: env
        uses: actions/github-script@v6
        with:
          script: |
            switch('${{ inputs.environment }}') {
              case 'staging':
                return "stg"
              case 'production':
                return "prd"
              case 'test':
                return "dev"  // test uses dev environment but different revision
              default:
                return "dev"
            }
          result-encoding: string

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Latest release
        id: version
        uses: actions/github-script@v6
        with:
          script: |
            if ('${{ inputs.tag }}' === '') {
              const resp = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
              return resp.data.tag_name
            } else {
              return '${{ inputs.tag }}'
            }
          result-encoding: string

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set deployment parameters
        id: deployment-params
        uses: actions/github-script@v6
        with:
          script: |
            const isTest = '${{ inputs.environment }}' === 'test'
            const appName = '${{ github.event.repository.name }}'
            const revisionSuffix = isTest ? 'test' : ''
            
            return {
              appName: appName,
              revisionSuffix: revisionSuffix,
              isTest: isTest,
              baseAppName: appName
            }
          result-encoding: json

      # HACK: use az cli to deploy bicep until azure/arm-deploy supports --template-spec
      - name: Deploy Container App
        run: |
          DEPLOYMENT_PARAMS='${{ steps.deployment-params.outputs.result }}'
          IS_TEST=$(echo $DEPLOYMENT_PARAMS | jq -r '.isTest')
          REVISION_SUFFIX=$(echo $DEPLOYMENT_PARAMS | jq -r '.revisionSuffix')
          BASE_APP_NAME=$(echo $DEPLOYMENT_PARAMS | jq -r '.baseAppName')
          
          if [ "$IS_TEST" = "true" ]; then
            # For test environment, deploy as new revision to existing dev container app
            echo ca_outputs=$(az deployment group create \
              --name "$BASE_APP_NAME-test-revision" \
              --resource-group "app-ticc-${{ steps.env.outputs.result }}-ae-rg" \
              --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              --template-spec "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-ticc-${{ steps.env.outputs.result }}-ae-rg/providers/Microsoft.Resources/templateSpecs/ts-container-app-revision/versions/1.0" \
              --parameters "env=${{ steps.env.outputs.result }}" \
              --parameters "baseAppName=$BASE_APP_NAME" \
              --parameters "revisionSuffix=$REVISION_SUFFIX" \
              --parameters "imageTag=ghcr.io/${{ github.repository }}:${{ steps.version.outputs.result }}" \
              --parameters "ghcrUser=${{ secrets.GHCR_USER }}" \
              --parameters "ghcrPat=${{ secrets.GHCR_PAT }}" \
              --query properties.outputs) >> $GITHUB_ENV
          else
            # For dev/staging/prod, deploy as normal container app
            echo ca_outputs=$(az deployment group create \
              --name "${{ github.event.repository.name }}" \
              --resource-group "app-ticc-${{ steps.env.outputs.result }}-ae-rg" \
              --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              --template-spec "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-ticc-${{ steps.env.outputs.result }}-ae-rg/providers/Microsoft.Resources/templateSpecs/ts-container-app/versions/1.0" \
              --parameters "env=${{ steps.env.outputs.result }}" \
              --parameters "appName=${{ github.event.repository.name }}" \
              --parameters "imageTag=ghcr.io/${{ github.repository }}:${{ steps.version.outputs.result }}" \
              --parameters "ghcrUser=${{ secrets.GHCR_USER }}" \
              --parameters "ghcrPat=${{ secrets.GHCR_PAT }}" \
              --query properties.outputs) >> $GITHUB_ENV
          fi

      - name: API backend params
        id: backend
        uses: actions/github-script@v6
        with:
          script: |
            const outputs = JSON.parse('${{ env.ca_outputs }}')
            const deploymentParams = JSON.parse('${{ steps.deployment-params.outputs.result }}')
            const isTest = deploymentParams.isTest
            
            let backendName = '${{ inputs.api-backends }}' || '${{ github.event.repository.name }}'
            if (isTest) {
              backendName = backendName + '-test'
            }
            
            let params = `backendNames=${backendName}`
            params += ` containerAppId=${outputs.containerAppId.value}`
            params += ` containerAppFqdn=${outputs.containerAppFqdn.value}`
            return params
          result-encoding: string

      - name: Deploy API backend
        run: |
          az deployment group create \
            --name ${{ github.event.repository.name }}-api-backend \
            --resource-group "app-ticc-${{ steps.env.outputs.result }}-ae-rg" \
            --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --template-spec "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/app-ticc-${{ steps.env.outputs.result }}-ae-rg/providers/Microsoft.Resources/templateSpecs/ts-api-backend/versions/1.0" \
            --parameters "env=${{ steps.env.outputs.result }}" \
            --parameters ${{ steps.backend.outputs.result }}

